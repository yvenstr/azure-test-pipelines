trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'
  condition: 





# init - backend

- task: TerraformTaskV2@2
  inputs:
    provider: 'aws'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/microservices/configuration/iaac/aws/kubernetes'
    backendServiceAWS: 'aws-for-terraform'
    backendAWSBucketName: 'terraform-backend-state-yvenstr-123'
    backendAWSKey: 'kubernetes-dev.tfstate'

- task: TerraformTaskV1@0
  inputs:
    provider: 'aws'
    command: 'status'
    workingDirectory: '$(System.DefaultWorkingDirectory)/microservices/configuration/iaac/aws/kubernetes'
    environmentServiceNameAWS: 'aws-for-terraform'

- task: TerraformTaskV3@3
  inputs:
    provider: 'aws'
    command: 'import aws_iam_role.eks_cluster my-cluster-eks-cluster-role'
    workingDirectory: '$(System.DefaultWorkingDirectory)/microservices/configuration/iaac/aws/kubernetes'
    environmentServiceNameAWS: 'aws-for-terraform'

- task: TerraformTaskV4@4
  inputs:
    provider: 'aws'
    command: 'import aws_iam_role.eks_node my-cluster-eks-node-group-role'
    workingDirectory: '$(System.DefaultWorkingDirectory)/microservices/configuration/iaac/aws/kubernetes'
    environmentServiceNameAWS: 'aws-for-terraform'
- task: TerraformTaskV4@4
  inputs:
    provider: 'aws'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/microservices/configuration/iaac/aws/kubernetes'
    environmentServiceNameAWS: 'aws-for-terraform'
  

- task: TerraformTaskV4@4
  inputs:
    provider: 'aws'
    command: 'destroy'
    workingDirectory: '$(System.DefaultWorkingDirectory)/microservices/configuration/iaac/aws/kubernetes'
    environmentServiceNameAWS: 'aws-for-terraform'
