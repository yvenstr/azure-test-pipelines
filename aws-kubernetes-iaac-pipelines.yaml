trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  terraformVersion: 'latest'
  roleNameCluster: 'my-cluster-eks-cluster-role'
  roleNameNode: 'my-cluster-eks-node-group-role'
  workingDirectory: '$(System.DefaultWorkingDirectory)/microservices/configuration/iaac/aws/kubernetes'


steps:
- script: echo EKS cluster with Terraform!
  displayName: 'Run a test EKS terraform infrastructure'

# init - backend

- task: TerraformTaskV2@2
  inputs:
    provider: 'aws'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/microservices/configuration/iaac/aws/kubernetes'
    backendServiceAWS: 'aws-for-terraform'
    backendAWSBucketName: 'terraform-backend-state-yvenstr-123'
    backendAWSKey: 'kubernetes-dev.tfstate'


- script: |
    echo "Importing existing AWS IAM Roles into Terraform State"
    cd $(workingDirectory)
    terraform import aws_iam_role.eks_cluster $(roleNameCluster)
    terraform import aws_iam_role.eks_node $(roleNameNode)
  displayName: 'Terraform Import IAM Roles'
- task: TerraformTaskV4@4
  inputs:
    provider: 'aws'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/microservices/configuration/iaac/aws/kubernetes'
    environmentServiceNameAWS: 'aws-for-terraform'
  

- task: TerraformTaskV4@4
  inputs:
    provider: 'aws'
    command: 'destroy'
    workingDirectory: '$(System.DefaultWorkingDirectory)/microservices/configuration/iaac/aws/kubernetes'
    environmentServiceNameAWS: 'aws-for-terraform'
